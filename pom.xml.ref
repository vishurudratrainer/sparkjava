package mlib;

import org.apache.spark.ml.Pipeline;
import org.apache.spark.ml.PipelineModel;
import org.apache.spark.ml.PipelineStage;
import org.apache.spark.ml.classification.DecisionTreeClassificationModel;
import org.apache.spark.ml.classification.DecisionTreeClassificationModel$;
import org.apache.spark.ml.classification.DecisionTreeClassifier;
import org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator;
import org.apache.spark.ml.feature.StringIndexer;
import org.apache.spark.ml.feature.VectorAssembler;
import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;
import org.apache.spark.sql.SparkSession;

public class IrisMlib1 {
    public static void main(String[] args) {
        SparkSession spark = SparkSession
                .builder()
                .appName("Iris")
                .master("local[4]")
                .getOrCreate();
//getting data
        Dataset<Row> irisDf = spark.read().option("header", "true")
                .option("inferSchema", "true")
                .csv("data/Iris.csv");
        irisDf = irisDf.drop("id");
        //convert output column to numeric
        StringIndexer labelIndexer = new StringIndexer()
                .setInputCol("Species")
                .setOutputCol("indexedLabel");
        labelIndexer.fit(irisDf);
        //thses converts all our input cplumns to feature column as an array
        VectorAssembler vectorAssembler = new VectorAssembler()
                .setInputCols(new String[]{"SepalLengthCm", "SepalWidthCm", "PetalLengthCm", "PetalWidthCm"})
                .setOutputCol("features");
        double[] weights = {0.8, 0.2};
        //used to divide our data to training and testing
        Dataset<Row> data[] = irisDf.randomSplit(weights, 10L);
        Dataset<Row> trainingData = data[0];
        Dataset<Row> testingData = data[1];
        //creating decision tree
        DecisionTreeClassifier model = new DecisionTreeClassifier()
                .setLabelCol("indexedLabel")
                .setFeaturesCol("features");
        Pipeline pipeline = new Pipeline().setStages(new PipelineStage[]{
                labelIndexer, vectorAssembler, model
        });

        PipelineModel actualModel = pipeline.fit(trainingData);//here actual model is made
        //Allowing prediction on test data
        Dataset<Row> predictions = actualModel.transform(testingData);
        predictions.show();
        MulticlassClassificationEvaluator evaluator = new MulticlassClassificationEvaluator()
                .setLabelCol("indexedLabel")
                .setPredictionCol("prediction")
                .setMetricName("accuracy");
        System.out.println(evaluator.evaluate(predictions));
        DecisionTreeClassificationModel printModel = (DecisionTreeClassificationModel)
                actualModel.stages()[2];
        System.out.println(printModel.toDebugString());


    }
}
